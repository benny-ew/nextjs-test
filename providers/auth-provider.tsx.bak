'use client';

import { createContext, useContext, useReducer, useEffect, ReactNode } from 'react';
import { User, LoginCredentials, AuthState, AuthContextType } from '@/types/auth';

// Mock users for simulation
const MOCK_USERS: User[] = [
  {
    id: '1',
    email: 'admin@example.com',
    name: 'Admin User',
    avatar: '/placeholder-avatar.png'
  },
  {
    id: '2', 
    email: 'user@example.com',
    name: 'John Doe',
    avatar: '/placeholder-avatar.png'
  },
  {
    id: '3',
    email: 'demo@example.com', 
    name: 'Demo User',
    avatar: '/placeholder-avatar.png'
  }
];

// Auth action types
type AuthAction = 
  | { type: 'LOGIN_START' }
  | { type: 'LOGIN_SUCCESS'; payload: User }
  | { type: 'LOGIN_ERROR' }
  | { type: 'LOGOUT' }
  | { type: 'RESTORE_SESSION'; payload: User };

// Auth reducer
const authReducer = (state: AuthState, action: AuthAction): AuthState => {
  switch (action.type) {
    case 'LOGIN_START':
      return {
        ...state,
        isLoading: true
      };
    case 'LOGIN_SUCCESS':
      return {
        user: action.payload,
        isAuthenticated: true,
        isLoading: false
      };
    case 'LOGIN_ERROR':
      return {
        user: null,
        isAuthenticated: false,
        isLoading: false
      };
    case 'LOGOUT':
      return {
        user: null,
        isAuthenticated: false,
        isLoading: false
      };
    case 'RESTORE_SESSION':
      return {
        user: action.payload,
        isAuthenticated: true,
        isLoading: false
      };
    default:
      return state;
  }
};

// Initial state
const initialState: AuthState = {
  user: null,
  isAuthenticated: false,
  isLoading: true // Start with loading to check for existing session
};

// Create context
const AuthContext = createContext<AuthContextType | undefined>(undefined);

// Auth provider component
interface AuthProviderProps {
  children: ReactNode;
}

export function AuthProvider({ children }: AuthProviderProps) {
  const [state, dispatch] = useReducer(authReducer, initialState);

  // Simulate checking for existing session on mount
  useEffect(() => {
    const checkExistingSession = () => {
      const storedUser = localStorage.getItem('user');
      if (storedUser) {
        try {
          const user = JSON.parse(storedUser);
          dispatch({ type: 'RESTORE_SESSION', payload: user });
        } catch (error) {
          // Invalid stored user data, clear it
          localStorage.removeItem('user');
          dispatch({ type: 'LOGIN_ERROR' });
        }
      } else {
        dispatch({ type: 'LOGIN_ERROR' });
      }
    };

    // Simulate async session check
    setTimeout(checkExistingSession, 500);
  }, []);

  // Login function
  const login = async (credentials: LoginCredentials): Promise<void> => {
    dispatch({ type: 'LOGIN_START' });

    // Simulate API call delay
    await new Promise(resolve => setTimeout(resolve, 1000));

    // Find user by email and validate password
    const user = MOCK_USERS.find(u => u.email === credentials.email);
    
    if (!user) {
      dispatch({ type: 'LOGIN_ERROR' });
      throw new Error('User not found');
    }

    // Simple password validation (in real app, this would be done on server)
    // For demo, any password works except 'wrong'
    if (credentials.password === 'wrong') {
      dispatch({ type: 'LOGIN_ERROR' });
      throw new Error('Invalid password');
    }

    // Store user in localStorage (in real app, you'd store tokens)
    localStorage.setItem('user', JSON.stringify(user));
    
    dispatch({ type: 'LOGIN_SUCCESS', payload: user });
  };

  // Logout function
  const logout = () => {
    localStorage.removeItem('user');
    dispatch({ type: 'LOGOUT' });
  };

  const contextValue: AuthContextType = {
    ...state,
    login,
    logout
  };

  return (
    <AuthContext.Provider value={contextValue}>
      {children}
    </AuthContext.Provider>
  );
}

// Custom hook to use auth context
export function useAuth(): AuthContextType {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
}
